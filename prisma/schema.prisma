// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  folders  Folder[]
  Share    Share[]

  @@map("users")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text // MediumText may be needed for MySql
  expiresAt DateTime

  @@map("session")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  // Relations
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  files      File[]
  parentId   Int? // for nested folders
  parent     Folder?  @relation("Subfolders", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders Folder[] @relation("Subfolders")
  shares     Share[]

  @@map("folders")
}

model File {
  id         Int      @id @default(autoincrement())
  name       String
  size       Int
  url        String // file location (filesystem path or cloud URL)
  uploadedAt DateTime @default(now())

  // Relations
  folderId Int?
  folder   Folder? @relation(fields: [folderId], references: [id])

  @@map("files")
}

model Share {
  id        Int      @id @default(autoincrement())
  token     String   @unique // UUID or random string for shareable link
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  folderId Int
  folder   Folder @relation(fields: [folderId], references: [id])
  userId   Int
  user     User   @relation(fields: [userId], references: [id])

  @@map("shares")
}
